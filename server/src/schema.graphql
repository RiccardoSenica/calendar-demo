type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: AppointmentOrderByInput
  ): Feed!
  allAppointments: [Appointment]
  oneAppointment(_id: ID!): Appointment
  allUsers: [User]
  users: [User!]!
}

type Feed {
  id: ID!
  appointments: [Appointment!]!
  count: Int!
}

type Mutation {
  createAppointment(
    title: String!
    description: String
    type: String!
    start: DateTime!
    end: DateTime!
    deleted: Boolean
  ): Appointment!
  updateAppointment(
    _id: ID!
    title: String!
    description: String
    type: String!
    start: DateTime!
    end: DateTime!
    deleted: Boolean
  ): Appointment
  deleteAppointment(_id: ID!): Appointment
  signup(email: String!, password: String!, username: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  follow(appointmentId: ID!): Follow
}

type Subscription {
  newAppointment: Appointment
  newFollow: Follow
}

#User Schemas
type User {
  _id: ID!
  username: String!
  email: String!
  password: String!
  appointments: [Appointment!]!
}
input UserInput {
  username: String!
  email: String!
  password: String!
  appointments: [AppointmentInput!]!
}
type AuthPayload {
  token: String
  user: User
}

# Appointment schemas
type Appointment {
  _id: ID!
  title: String!
  description: String
  type: String!
  start: DateTime!
  end: DateTime!
  deleted: Boolean
  createdBy: User
  # follows: [Follow!]!
}
input AppointmentInput {
  title: String!
  description: String
  type: String!
  start: DateTime!
  end: DateTime!
  deleted: Boolean
}
input AppointmentOrderByInput {
  title: Sort
  desc: Sort
}

# Follow schemas
type Follow {
  _id: ID!
  appointment: Appointment!
  user: User!
}

# General-purpose schemas
enum Sort {
  asc
  desc
}
scalar DateTime
scalar Time
