type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: AppointmentOrderByInput
  ): Feed!
  allProducts: [Product]
  allAppointments: [Appointment]
  users: [User!]!
}

type Feed {
  id: ID!
  appointments: [Appointment!]!
  count: Int!
}

type Mutation {
  createAppointment(
    input: AppointmentInput
  ): Appointment!
  updateAppointment(
    _id: ID!, 
    input: AppointmentInput
  ): Appointment
  deleteAppointment(
    _id: ID!
  ) : Appointment
  createProduct(
    input: ProductInput
  ) : Product
  updateProduct(
    _id: ID!, 
    input: ProductInput
  ): Product
  deleteProduct(
    _id: ID!
  ) : Product
  signup(
    email: String!
    password: String!
    name: String!
  ): AuthPayload
  login(
    email: String!, 
    password: String!
  ): AuthPayload
  follow(
    appointmentId: ID!
    ): Follow
}

type Subscription {
  newAppointment: Appointment
  newFollow: Follow
}

type AuthPayload {
  token: String
  user: User
}

type User {
  _id: ID!
  name: String!
  email: String!
  appointments: [Appointment!]!
}

# Appointment model
type Appointment {
  _id: ID!
  title: String!
  description: String!
  # dateStart: Date!
  # dateEnd: Date!
  timeStart: Time!
  timeEnd: Time!
  deleted: Boolean
  # createdBy: User
  # follows: [Follow!]!
  # createdAt: DateTime!
}
input AppointmentInput {
  title: String!
  description: String!
  # dateStart: Date!
  # dateEnd: Date!
  timeStart: Time!
  timeEnd: Time!
 }

# Product model
type Product {
  _id: ID!
  title: String!
  qty: Int
}
input ProductInput {
  title: String!
  qty: Int
 }

type Follow {
  _id: ID!
  appointment: Appointment!
  user: User!
}


input AppointmentOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

scalar DateTime
scalar Time
